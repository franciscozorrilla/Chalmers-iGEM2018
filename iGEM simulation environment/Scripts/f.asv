function dx = f(t,x,superModel)

%Rule to make S.bo switch to Myrosinase production once MFalpha2 thershold
%is reached

if x(17)>=0.0001
   superModel.SubModels{1} = setParam(superModel.SubModels{1},'eq','r_4066',0); 
   superModel.SubModels{1} = setParam(superModel.SubModels{1},'lb','r_4067',0.0001);
end

%Glucose uptake kinetics
g1 =(4*x(7)/(12+x(7)));
g2 =(3*x(7)/(15+x(7)));
g3 =(4*x(7)/(17+x(7)));
g5 =(5*x(7)/(10+x(7)));
g6 =(3*x(7)/(10+x(7)));

%Amino acid pool uptake kinetics
aa5 =(5*x(8)/(5+x(8)));
aa6 =(5*x(8)/(5+x(8)));

%Water uptake kinetics
h2 =(2*x(9)/(20+x(9)));
h3 =(2*x(9)/(24+x(9)));
h6 =(3*x(9)/(23+x(9)));

%Oxygen uptake kinetics
o1 =(4*x(10)/(5+x(10)));
o5 =(6*x(10)/(5+x(10)));
o6 =(3*x(10)/(5+x(10)));

%Phosphate uptake kinetics
p1 =(3*x(11)/(10+x(11)));
p2 =(5*x(11)/(10+x(11)));
p3 =(4*x(11)/(10+x(11)));
p4 =(6*x(11)/(10+x(11)));
p5 =(4*x(11)/(10+x(11)));

%Ammonia uptake kinetics
am1 =(3*x(12)/(5+x(12)));
am2 =(4*x(12)/(5+x(12)));
am3 =(4*x(12)/(5+x(12)));
am4 =(2*x(12)/(5+x(12)));

%Carbon dioxide uptake kinetics
c4 = (5*x(13)/(5+x(13)));

%Update glucose consumption
superModel.SubModels{1} = setParam(superModel.SubModels{1},'lb','r_1714',-g1); %g1 takes a negative sign to account for the way this uptake reaction is defined
superModel.SubModels{2} = setParam(superModel.SubModels{2},'ub','glcIn',g2);
superModel.SubModels{3} = setParam(superModel.SubModels{3},'ub','glcIn',g3);
superModel.SubModels{5} = setParam(superModel.SubModels{5},'ub','HMR_9034',g5);
superModel.SubModels{6} = setParam(superModel.SubModels{6},'ub','HMR_9034',g6);

%Update Amino acid pool consumption
superModel.SubModels{5} = setParam(superModel.SubModels{5},'ub','EXC_IN_m90000c',aa5);
superModel.SubModels{6} = setParam(superModel.SubModels{6},'ub','EXC_IN_m90000c',aa6);

%Update water consumption
superModel.SubModels{2} = setParam(superModel.SubModels{2},'ub','EX_h2o_LPAREN_e_RPAREN_Up',h2);
superModel.SubModels{3} = setParam(superModel.SubModels{3},'lb','r113',-h3);% h3 should be negative to account for uptake reaction definition
superModel.SubModels{6} = setParam(superModel.SubModels{6},'lb','HMR_9034',-h6);%h6 should be negative to account for uptake reaction definition

%Update Oxygen consumption
superModel.SubModels{1} = setParam(superModel.SubModels{1},'lb','r_1992',-o1);
superModel.SubModels{5} = setParam(superModel.SubModels{5},'ub','HMR_9048',o5);
superModel.SubModels{6} = setParam(superModel.SubModels{6},'ub','HMR_9048',o6);

%Update phosphate consumption
superModel.SubModels{1} = setParam(superModel.SubModels{1},'lb','r_2005',-p1);
superModel.SubModels{2} = setParam(superModel.SubModels{2},'ub','EX_pi_LPAREN_e_RPAREN_',p2);
superModel.SubModels{3} = setParam(superModel.SubModels{3},'ub','r114',p3);
superModel.SubModels{4} = setParam(superModel.SubModels{4},'ub','piIN',p4);
superModel.SubModels{5} = setParam(superModel.SubModels{5},'ub','HMR_9072',p5);

%Update ammonium consumption
superModel.SubModels{1} = setParam(superModel.SubModels{1},'lb','r_1654',-am1);
superModel.SubModels{2} = setParam(superModel.SubModels{2},'ub','EX_nh4_LPAREN_e_RPAREN_',am2);
superModel.SubModels{3} = setParam(superModel.SubModels{3},'ub','r112',am3);
superModel.SubModels{4} = setParam(superModel.SubModels{4},'ub','NH4IN',am4);

%Update carbon dioxide consumption
superModel.SubModels{4} = setParam(superModel.SubModels{4},'ub','CO2In',c4);

%FBA for each model
solSbo = solveLP(superModel.SubModels{1},1);
solBth = solveLP(superModel.SubModels{2},1);
solEre = solveLP(superModel.SubModels{3},1);
solMsi = solveLP(superModel.SubModels{4},1);
solCan = solveLP(superModel.SubModels{5},1);
solCol = solveLP(superModel.SubModels{6},1);

FBAsol{1} = solSbo.f;
FBAsol{2} = solBth.f;
FBAsol{3} = solEre.f;
FBAsol{4} = solMsi.f;
FBAsol{5} = solCan.f;
FBAsol{6} = solCol.f;

FBAsol %to show progress

%Need to set solution to 0 if unfeasible, sets as blank by default and
%causes errors otherwise
if isempty(solSbo.f)
    solSbo.f = 0;
    solSbo.x = 0.*ones(length(superModel.SubModels{1}.rxns),1);
    dispEM('S.bo model was not able to be solved',false)
end
if isempty(solBth.f)
    solBth.f = 0;
    solBth.x = 0.*ones(length(superModel.SubModels{2}.rxns),1);
    dispEM('B.th model was not able to be solved',false)
end
if isempty(solEre.f)
   solEre.f = 0; 
   solEre.x = 0.*ones(length(superModel.SubModels{3}.rxns),1);
   dispEM('E.re model was not able to be solved',false)
end
if isempty(solMsi.f)
   solMsi.f = 0; 
   solMsi.x = 0.*ones(length(superModel.SubModels{4}.rxns),1);
   dispEM('M.si model was not able to be solved',false)
end
if isempty(solCan.f)
   solCan.f = 0; 
   solCan.x = 0.*ones(length(superModel.SubModels{5}.rxns),1);
   dispEM('Cancer model was not able to be solved',false)
end
if isempty(solCol.f)
    solCol.f = 0;
    solCol.x = 0.*ones(length(superModel.SubModels{6}.rxns),1) ;
    dispEM('Colon model was not able to be solved',false)
end

%Biomass mass balances
dx(1)= abs(x(1)*solSbo.f) + 0.001*(1000-x(1)); %second term is F(x_in-x_out), parameters were made up
dx(2)= abs(x(2)*solBth.f) + 0.001*(-x(2));
dx(3)= abs(x(3)*solEre.f) + 0.001*(-x(3));
dx(4)= abs(x(4)*solMsi.f) + 0.001*(-x(4)); 
dx(5)= abs(x(5)*solCan.f);
dx(6)= 0;

%note:consider adding outflow for metabolite mass balances, most substrates
%should be fully utilized, but some stuff can still flow out like
%co2,methane,etc

%Glucose mass balance: all models consume glucose except methanogen M.si
dx(7) = - abs(solSbo.x(1808)*x(1)) - abs(solBth.x(944)*x(2))- abs(solEre.x(108)*x(3)) - abs(solCan.x(3996)*x(5)) - abs(solCol.x(3113)*x(6))+ 9;

%Amino acid pool mass balance: only cancer and colon models consume amino acid pool pseudometabolite
dx(8) = - abs(solCan.x(4448)*x(5)) - abs(solCol.x(3373)*x(6))+ 5;

%Water mass balance
dx(9) = -abs(solBth.x(945)*x(2)) - abs(solEre.x(115)*x(3)) + abs(solMsi.x(418)*x(4)) -abs(solCol.x(3127)*x(6)) + 13; %simulation takes a while if water is limiting

%Oxygen mass balance
dx(10)= - abs(solSbo.x(1811)*x(1)) - abs(solCan.x(4010)*x(5)) - abs(solCol.x(3126)*x(6)) + 8;

%Phosphate mass balance
dx(11)= -abs(solSbo.x(1812)*x(1)) - abs(solBth.x(948)*x(2)) - abs(solEre.x(116)*x(3)) - abs(solMsi.x(414)*x(4)) - abs(solCan.x(4031)*x(5)) + 1;

%Ammonium mass balance
dx(12)= - abs(solSbo.x(1806)*x(1)) - abs(solBth.x(947)*x(2)) - abs(solEre.x(114)*x(3)) - abs(solMsi.x(413)*x(4)) + abs(solCan.x(4032)*x(5)) + 4;

%CO2 mass balance
dx(13)=  abs(solSbo.x(1807)*x(1)) + abs(solEre.x(109)*x(3)) - abs(solMsi.x(417)*x(4)) + abs(solCol.x(3128)*x(6)) - 0.5*x(12);

%Propanoate mass balance
dx(14)= abs(solBth.x(954)*x(2)) - 0.01*x(14);

%Butyrate mass balance
dx(15)= abs(solEre.x(111)*x(3)) - 0.01*x(15);

%Methane mass balance
dx(16)= abs(solMsi.x(432)*x(4)) - 0.01*x(16);

%MFalpha2 mass balance
dx(17)= abs(solSbo.x(1818)*x(1)) + 0.01;

%Myrosinase mass balance
dx(18)= abs(solSbo.x(1819)*x(1))

dx = dx(:);

end